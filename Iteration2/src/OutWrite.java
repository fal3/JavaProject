import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.BufferedReader;


//import java.FileReader;
//This program writes out a vector file 
//The file credits.svg will then be sent to the cloudconvert.com 
//svg -> ttf
import static java.lang.System.*;

import java.io.*;
import java.util.Scanner;

public class OutWrite {

	public static void main(String[] args) {
		try{
			
			//initialize the file to be converted as credits
			FileWriter fw = new FileWriter("Credits.svg");
			//with a writer you need a print writer
			PrintWriter pw = new PrintWriter(fw);
			
			BufferedReader br = new BufferedReader(new FileReader("Credits.txt")); 
			//String line = null; 
			//making the svg file and its contents
			pw.println("<?xml version=\"1.0\" standalone=\"no\"?>");
			pw.println("<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\" >");
			pw.println("<svg xmlns=\"http://www.w3.org/2000/svg\">");
			pw.println("<metadata>Generated by IcoMoon</metadata>");
			pw.println("<defs>");
			pw.println("<font id=\"icomoon\" horiz-adv-x=\"1024\">");
			pw.println("<font-face units-per-em=\"1024\" ascent=\"960\" descent=\"-64\" />");
			pw.println("<missing-glyph horiz-adv-x=\"1024\" />");
			pw.println("<glyph unicode=\"&#x20;\" d=\"\" horiz-adv-x=\"512\" />");
			//PRINTING OUT RASTERIZED PART
			//INSERT FILE DESTINATION IN UNICODE PART

			String filepath = "/Users/......./scannedUserInput.svg";
			File userInput = new File(filepath);
			//Making the alphabet
			for(int i=0;i<75;i++)
			{
				String uniNum = "&#xe"+(601+i);
				String rasterizedCode =  
				pw.println("<glyph unicode=\""+uniNum+";\" d=\"M896 704h-192v128c0 35.2-28.8 64-64 64h-256c-35.2 0-64-28.8-64-64v-128h-192c-70.4 0-128-57.6-128-128v-512c0-70.4 57.6-128 128-128h768c70.4 0 128 57.6 128 128v512c0 70.4-57.6 128-128 128zM384 832h256v-128h-256v128zM768 256h-192v-192h-128v192h-192v128h192v192h128v-192h192v-128z\" />");
			//pw.println("<glyph unicode=\"&#xe601;\" d=\"FILEPATH FOR RASTERIZED UNICODE");
				//The rasterized unicode specified above is going to be generated by the method we call from the PNGtoSVG which we are stumped on
				//We take the file and the string and use a regex command to properly format the the scanned image from the website convertor (Mouse click)
				//This 
			}
			pw.println("</font></defs></svg>");
			pw.close();
		}
		catch (IOException e){
			out.println("error");
		}

	}

	

}
